{"version":3,"sources":["Components/form/SearchForm.js","Components/results/Results.js","Components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","value","search","onChange","handleInputChange","placeholder","type","onClick","handleFormSubmit","Results","results","map","result","key","id","firstname","lastname","salary","position","Search","state","filterData","searchText","error","event","setState","target","preventDefault","getUserByName","Data","this","console","log","JSON","stringify","filter","includes","users","getUsers","style","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"42BAwBeA,MArBf,SAAoBC,GAChB,OACI,0BAAMC,UAAU,UACZ,yBAAKA,UAAU,cACX,2BAAOC,QAAQ,SAAf,cACA,2BACIC,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,kBAChBL,UAAU,eACVM,YAAY,wBAIhB,4BAAQC,KAAK,SAASC,QAAST,EAAMU,iBAAkBT,UAAU,mBAAjE,aCYDU,MAzBf,SAAiBX,GACb,OACI,wBAAIC,UAAU,cACTD,EAAMY,QAAQC,KAAI,SAAAC,GAAM,OACrB,6BACI,wBAAIC,IAAKD,EAAOE,GAAIf,UAAU,mBAA9B,eACiBa,EAAOG,WAExB,wBAAIF,IAAKD,EAAOE,GAAIf,UAAU,mBAA9B,cACgBa,EAAOI,UAEvB,wBAAIH,IAAKD,EAAOE,GAAIf,UAAU,mBAA9B,YACca,EAAOK,QAErB,wBAAIJ,IAAKD,EAAOE,GAAIf,UAAU,mBAA9B,aACea,EAAOM,UAEtB,mC,OC+CLC,E,4MA7DXC,MAAQ,CACJlB,OAAQ,GACRQ,QAAS,GACTW,WAAY,GACZC,WAAY,GACZC,MAAO,I,EAoBXnB,kBAAoB,SAAAoB,GAEhB,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOzB,S,EAG7CO,iBAAmB,SAAAgB,GACfA,EAAMG,iBADkB,IAEhBL,EAAe,EAAKF,MAApBE,WACFD,EAAa,EAAKO,cAAcN,GAEtC,EAAKG,SAAS,CAAEJ,WAAYA,EAAYnB,OAAQoB,K,yDAzBhD,OAAOO,I,oCAGG5B,GAAQ,IACVS,EAAYoB,KAAKV,MAAjBV,QAER,OADAqB,QAAQC,IAAR,mBAAwBC,KAAKC,UAAUxB,KAChCA,EAAQyB,QAAO,SAAAvB,GAAM,OAAIA,EAAOG,UAAUqB,SAASnC,Q,0CAI1D,IAAMoC,EAAQP,KAAKQ,WACnBR,KAAKL,SAAS,CAAEf,QAAS2B,M,+BAiBnB,IAAD,EACmCP,KAAKV,MAArClB,EADH,EACGA,OAAQQ,EADX,EACWA,QAASW,EADpB,EACoBA,WAIzB,OACI,yBAAKkB,MAJW,CAChB,cAAc,QAIV,wCACA,kBAAC,EAAD,CACI/B,iBAAkBsB,KAAKtB,iBACvBJ,kBAAmB0B,KAAK1B,kBACxBM,QAASA,IAGTR,EAAOsC,OAAS,EAAI,kBAAC,EAAD,CAAS9B,QAASW,IAChC,kBAAC,EAAD,CAASX,QAASA,S,GAtDvB+B,aCONC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLQ,QAAQR,MAAMA,EAAMqC,c","file":"static/js/main.c41e4086.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form className=\"search\">\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"breed\">User Name:</label>\r\n                <input\r\n                    value={props.search}\r\n                    onChange={props.handleInputChange}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter first name...\"\r\n\r\n                />\r\n\r\n                <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\r\n                    Search\r\n        </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\"\r\n\r\n\r\nfunction Results(props) {\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {props.results.map(result => (\r\n                <div>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        first Name: {result.firstname}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Last Name: {result.lastname}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Salary: ${result.salary}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Position: {result.position}\r\n                    </li>\r\n                    <br />\r\n                </div>\r\n\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, { Component } from \"react\";\r\nimport SearchForm from \"../form/SearchForm\";\r\nimport Results from \"../results/Results\"\r\nimport Data from \"../../user.json\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        filterData: [],\r\n        searchText: \"\",\r\n        error: \"\"\r\n\r\n    };\r\n\r\n    getUsers() {\r\n        return Data;\r\n    };\r\n\r\n    getUserByName(value) {\r\n        const { results } = this.state;\r\n        console.log(`RESULTS: ${JSON.stringify(results)}`)\r\n        return results.filter(result => result.firstname.includes(value));\r\n    }\r\n\r\n    componentDidMount() {\r\n        const users = this.getUsers();\r\n        this.setState({ results: users });\r\n       \r\n    };\r\n\r\n    handleInputChange = event => {\r\n        // var searchString = \r\n        this.setState({ searchText: event.target.value });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        const { searchText } = this.state;\r\n        const filterData = this.getUserByName(searchText);\r\n\r\n        this.setState({ filterData: filterData, search: searchText });\r\n    };\r\n\r\n    render() {\r\n        const { search, results, filterData } = this.state;\r\n        const searchStyle = {\r\n            \"margin-left\":\"20%\"\r\n        }\r\n        return (\r\n            <div style={searchStyle}>\r\n                <h1>Search: </h1>\r\n                <SearchForm\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    handleInputChange={this.handleInputChange}\r\n                    results={results}\r\n                />\r\n                {\r\n                    search.length > 0 ? <Results results={filterData} />\r\n                        : <Results results={results} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Search; ","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Search from \"./Components/search/Search\"\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}